# ğŸ›’ API de Produtos Favoritos - Desafio AiqFome

## ğŸ“‹ DescriÃ§Ã£o

Esta Ã© uma API RESTful desenvolvida como parte do desafio tÃ©cnico da aiqfome. O objetivo Ã© permitir o gerenciamento de **clientes** e seus **produtos favoritos**, integrando com uma API externa para validaÃ§Ã£o dos produtos.

---

## ğŸš€ Tecnologias Utilizadas

- Node.js
- TypeScript
- Express
- PostgreSQL
- TypeORM
- Axios
- Docker / Docker Compose
- JWT para autenticaÃ§Ã£o
- ESLint + Prettier

---

## ğŸ“¦ Como rodar o projeto

### PrÃ©-requisitos

- Docker e Docker Compose instalados

### Passo a passo

1. Clone o repositÃ³rio:
   ``bash
   git clone https://github.com/seu-usuario/seu-repo.git
   cd seu-repo
``

2. Crie um arquivo ``.env`` baseado no ``.env.example``.

3. Suba os containers: ``docker-compose up --build``

4. A API estarÃ¡ disponÃ­vel em: ``http://localhost:3000``

## ğŸ§  Funcionalidades
### Clientes
 - Criar cliente (POST /user)

 - Listar clientes (GET /user)

 - Editar cliente (PUT /user)

 - Remover cliente (DELETE /user)

| Campos obrigatÃ³rios: nome, email (Ãºnico), senha |

### Produtos Favoritos
 - Adicionar produto favorito (POST /product/)

 - Listar favoritos de um cliente (GET /product/favorites)

 - Listar todos os produtos (GET /product/all)

| Os produtos sÃ£o validados via Fake Store API | \
| Um produto nÃ£o pode ser duplicado na lista de favoritos de um cliente |

## ğŸ”’ AutenticaÃ§Ã£o

### A API exige autenticaÃ§Ã£o via JWT.

1. Crie um usuÃ¡rio: POST /users

2. FaÃ§a login: POST /auth/login

3. Use o token retornado no header das prÃ³ximas requisiÃ§Ãµes:

``Authorization: Bearer <token>``

## CritÃ©rios de aceite 

### Criterios citados no desafio:

`CorreÃ§Ã£o e funcionamento da API ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥` \
`Modelagem de dados (clientes/produtos) ğŸ”¥ğŸ”¥ğŸ”¥`\
`ValidaÃ§Ã£o e controle de dados ğŸ”¥ğŸ”¥ğŸ”¥`\
`DocumentaÃ§Ã£o ou instruÃ§Ã£o de uso ğŸ”¥ğŸ”¥`\
`SeguranÃ§a bÃ¡sica (auth, validaÃ§Ã£o) ğŸ”¥ğŸ”¥`

### SoluÃ§Ãµes para cada criterio
- CorreÃ§Ã£o e funcionamento da API: A api foi construida seguindo padrÃµes rest utilizando da lib `express`, todas as regras de negocio foram devidamente acatadas. \
- Modelagem de dados: Utilizei da lib `Typeorm` para trabalhar com os modelos necessarios, garantindo uma forma clara de exibir e manipular esses dados no codigo.\
- ValidaÃ§Ã£o e controle de dados: Usando tipos para garantir a entrada de dados correta e dto's para garantir as repostas adequadas a todas as requisiÃ§Ãµes. \
- DocumentaÃ§Ã£o: Foi elaborado uma collection no postman que garante clareza nos endpoints disponiveis na aplicaÃ§Ã£o.
- SeguranÃ§a: os endpoints foram devidamente projitos atraves de autenticaÃ§Ã£o por token, as senhas tambem sÃ£o criptografadas pela lib bcrypt.

### extra
para evitar erros durante a excuÃ§Ã£o da aplicaÃ§Ã£o, a mesma foi pensada para ser executada dentro de um container docker, garantindo assim mais confiabilidade no ambiente.
